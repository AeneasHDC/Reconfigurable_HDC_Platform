"""
/**
 * @brief 
 *
 *
 * @author Marco Angioli and Saeid Jamili
 * @email marco.angioli@uniroma1.it and saeid.jamili@uniroma1.it
 * @note Author names are listed in alphabetical order.
 * @date Created on: 12th August 2023
 * @date Last updated on: 5th May 2024
 * @institution Sapienza University of Rome
 *
 * @section LICENSE
    Copyright 2024 Sapienza University of Rome

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    Authors: Marco Angioli & Saeid Jamili

 * @section CHANGELOG
 * @version 1.0.2
 * @date May 2024
 */
"""

import json

import sys
import os

if len(sys.argv) > 1 and sys.argv[1] == "called_from_run_file":
    relative_path_prefix = ""
else:
    relative_path_prefix = "../"
    
sys.path.append(relative_path_prefix + 'src/config/')

import config_py as config


input_folder_path = os.path.join(relative_path_prefix, "out//extracted_params//")
output_folder_path = os.path.join(relative_path_prefix, 'src//config//')

def generate_config_files(json_files, output_folder_path):
    cpp_header = "#ifndef EXCONFIG_CPP_H\n#define EXCONFIG_CPP_H\n"
    cpp_footer = "#endif // EXCONFIG_CPP_H\n"
    sv_header = "// SystemVerilog config file generated by script\n"
    sv_footer = "// End of config file\n"
    
    cpp_config = cpp_header
    sv_config = sv_header
    
    for json_file in json_files:
        json_file_path = os.path.join(input_folder_path, json_file)
        prefix = os.path.splitext(os.path.basename(json_file))[0].upper()

        # Read the JSON file
        with open(json_file_path, 'r') as file:
            data = json.load(file)
        
        # If data is a list, handle each dict separately
        if isinstance(data, list):
            for i, d in enumerate(data):
                _prefix = f"{prefix}_{i}"
                for key, value in d.items():
                    cpp_config += f"#define CONFIG_{_prefix}_{key.upper()} {value}\n"
                    sv_config += f"`define CONFIG_{_prefix}_{key.upper()} {value}\n"
        else:
            # Generate C++ config entries
            for key, value in data.items():
                cpp_config += f"#define CONFIG_{prefix}_{key.upper()} {value}\n"

            # Generate SystemVerilog config entries
            for key, value in data.items():
                sv_config += f"`define CONFIG_{prefix}_{key.upper()} {value}\n"

    cpp_config += cpp_footer
    sv_config += sv_footer

    # Ensure the output folder exists
    if not os.path.exists(output_folder_path):
        os.makedirs(output_folder_path)

    # Write the C++ config file
    cpp_filename = 'ex_config.hpp'
    with open(os.path.join(output_folder_path, cpp_filename), 'w') as file:
        file.write(cpp_config)

    # Write the SystemVerilog config file
    sv_filename = 'ex_config.sv'
    with open(os.path.join(output_folder_path, sv_filename), 'w') as file:
        file.write(sv_config)


if __name__ == '__main__':
  
    input_folder_path = os.path.join( relative_path_prefix, "out/extracted_params/", config.DS_NAME )
    json_files = ['BaseHVs_gen.json', 'LevelHVs_gen.json'] 
    output_folder_path = os.path.join( relative_path_prefix, 'src/config/' )
    generate_config_files( json_files, output_folder_path )