-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hdv_engine_hdv_engine_Pipeline_VITIS_LOOP_283_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    similarity_classes_0_load_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    similarity_classes_2_load_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    similarity_classes_1_load_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_pred_class_o : OUT STD_LOGIC_VECTOR (1 downto 0);
    p_pred_class_o_ap_vld : OUT STD_LOGIC );
end;


architecture behav of hdv_engine_hdv_engine_Pipeline_VITIS_LOOP_283_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln283_fu_75_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln285_fu_119_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_36 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_2_fu_81_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal similarity_max_fu_40 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln285_fu_115_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln7_fu_90_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_fu_102_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln7_fu_96_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal similarity_max_1_fu_108_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_159 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component hdv_engine_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component hdv_engine_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    i_fu_36_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_36 <= ap_const_lv2_0;
                elsif (((icmp_ln283_fu_75_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_fu_36 <= i_2_fu_81_p2;
                end if;
            end if; 
        end if;
    end process;

    similarity_max_fu_40_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    similarity_max_fu_40(0) <= '0';
                    similarity_max_fu_40(1) <= '0';
                    similarity_max_fu_40(2) <= '0';
                    similarity_max_fu_40(3) <= '0';
                    similarity_max_fu_40(4) <= '0';
                    similarity_max_fu_40(5) <= '0';
                    similarity_max_fu_40(6) <= '0';
                    similarity_max_fu_40(7) <= '0';
                    similarity_max_fu_40(8) <= '0';
                    similarity_max_fu_40(9) <= '0';
                    similarity_max_fu_40(10) <= '0';
                    similarity_max_fu_40(11) <= '0';
                    similarity_max_fu_40(12) <= '0';
                    similarity_max_fu_40(13) <= '0';
                    similarity_max_fu_40(14) <= '0';
                    similarity_max_fu_40(15) <= '0';
                    similarity_max_fu_40(16) <= '0';
                    similarity_max_fu_40(17) <= '0';
                    similarity_max_fu_40(18) <= '0';
                    similarity_max_fu_40(19) <= '0';
                    similarity_max_fu_40(20) <= '0';
                    similarity_max_fu_40(21) <= '0';
                    similarity_max_fu_40(22) <= '0';
                    similarity_max_fu_40(23) <= '0';
                    similarity_max_fu_40(24) <= '0';
                    similarity_max_fu_40(25) <= '0';
                    similarity_max_fu_40(26) <= '0';
                    similarity_max_fu_40(27) <= '0';
                    similarity_max_fu_40(28) <= '0';
                    similarity_max_fu_40(29) <= '0';
                    similarity_max_fu_40(30) <= '0';
                    similarity_max_fu_40(31) <= '0';
                elsif ((ap_const_boolean_1 = ap_condition_159)) then 
                                        similarity_max_fu_40(31 downto 0) <= zext_ln285_fu_115_p1(31 downto 0);
                end if;
            end if; 
        end if;
    end process;
    similarity_max_fu_40(63 downto 32) <= "00000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_159_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln283_fu_75_p2, icmp_ln285_fu_119_p2)
    begin
                ap_condition_159 <= ((icmp_ln285_fu_119_p2 = ap_const_lv1_1) and (icmp_ln283_fu_75_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln283_fu_75_p2)
    begin
        if (((icmp_ln283_fu_75_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    i_2_fu_81_p2 <= std_logic_vector(unsigned(i_fu_36) + unsigned(ap_const_lv2_1));
    icmp_ln283_fu_75_p2 <= "1" when (i_fu_36 = ap_const_lv2_3) else "0";
    icmp_ln285_fu_119_p2 <= "1" when (unsigned(similarity_max_fu_40) < unsigned(zext_ln285_fu_115_p1)) else "0";
    icmp_ln7_1_fu_102_p2 <= "1" when (i_fu_36 = ap_const_lv2_1) else "0";
    icmp_ln7_fu_90_p2 <= "1" when (i_fu_36 = ap_const_lv2_0) else "0";
    p_pred_class_o <= i_fu_36;

    p_pred_class_o_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln283_fu_75_p2, ap_block_pp0_stage0_11001, icmp_ln285_fu_119_p2)
    begin
        if (((icmp_ln285_fu_119_p2 = ap_const_lv1_1) and (icmp_ln283_fu_75_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_pred_class_o_ap_vld <= ap_const_logic_1;
        else 
            p_pred_class_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln7_fu_96_p3 <= 
        similarity_classes_0_load_1 when (icmp_ln7_fu_90_p2(0) = '1') else 
        similarity_classes_2_load_1;
    similarity_max_1_fu_108_p3 <= 
        similarity_classes_1_load_1 when (icmp_ln7_1_fu_102_p2(0) = '1') else 
        select_ln7_fu_96_p3;
    zext_ln285_fu_115_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(similarity_max_1_fu_108_p3),64));
end behav;
